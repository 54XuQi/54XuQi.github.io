<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA泛型</title>
      <link href="/2024/10/27/JAVA%E6%B3%9B%E5%9E%8B/"/>
      <url>/2024/10/27/JAVA%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JAVA-泛型"><a href="#JAVA-泛型" class="headerlink" title="JAVA 泛型"></a>JAVA 泛型</h2><h3 id="1、为什么引入泛型？"><a href="#1、为什么引入泛型？" class="headerlink" title="1、为什么引入泛型？"></a>1、为什么引入泛型？</h3><ul><li>Java当中的generic泛型，相信在初学时各位多少对其都存在一些困惑。其中的K，V，T等等以及通配符时而出现在类中，时而出现在方法里面。</li><li>那么我们又该如何使用Generics泛型这个概念呢？</li><li><strong>在了解泛型之前，首先应该了解在没有泛型之前，我们是如何解决问题的。</strong></li><li>下面展示一段简单的演示代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerPrinter</span> &#123;</span><br><span class="line">    Integer content;</span><br><span class="line">    IntegerPrinter(Integer content) &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(content);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>假设为我们想要打印一段int类型内容，我们创造了这个类。</li><li>当然，他可以很好的执行功能。</li><li>可如果需求变更，我们需要打印string类型的内容时，就难免需要费些力气。</li><li>再新建一个字符串的Printer:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringPrinter</span> &#123;</span><br><span class="line">    String content;</span><br><span class="line">    StringPrinter(String content) &#123;</span><br><span class="line">         <span class="built_in">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这种解法会给代码带来重复性，也给后来的拓展留下麻烦。</li><li>因此Java引入了Generic泛型这个概念。</li><li><strong>合适情况</strong>下，只需一个类，就可以处理之后的所有<strong>类型</strong>。</li></ul><h3 id="2、泛型类-Generic-Classes"><a href="#2、泛型类-Generic-Classes" class="headerlink" title="2、泛型类 Generic Classes"></a>2、泛型类 Generic Classes</h3><ul><li><strong>如何来声明一个generic的类呢？</strong></li><li>还是以之前的例子，我们可以将其进一步抽象为Printer类。</li><li>此处放出修改后的类Printer：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Printer</span> &lt;T&gt; &#123;</span><br><span class="line">    T content;</span><br><span class="line">    Printer(T content) &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>注意：</strong></p><ul><li>我们在<strong>类名</strong>与<strong>函数体</strong>间加入了 T。</li><li><strong>占位符</strong>T代表这里可以这个类中可以传入<strong>任何参数</strong>。</li><li>这里的T，也可以是K，V或其他的任何字符。</li><li>具体此处的T是什么类型，是由外界调用时决定的。</li><li>可以理解成，它将参数本身作为一个特殊的参数传入其中。</li></ul></li><li><p>这里提供Main方法中使用Printer类分别打印int类型和string类型的例子：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Printer&lt;Integer&gt; printer1 = <span class="keyword">new</span> <span class="title class_">Printer</span>( <span class="number">123</span> ) ;</span><br><span class="line">        printer1.print();</span><br><span class="line">        Printer&lt;String&gt; printer2 = <span class="keyword">new</span> <span class="title class_">Printer</span>( <span class="string">&quot;Hello World&quot;</span> ) ;</span><br><span class="line">        printer2.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里需要注意尖括号内的类型不能是像int、float一类的基本类型。</li><li>而是经过包装后的类型。</li><li>此处列出Java的基本类型与包装类型。</li></ul><table><thead><tr><th>基本类型</th><th>包装类型</th></tr></thead><tbody><tr><td>int</td><td>Integer</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>long</td><td>Long</td></tr></tbody></table><ul><li>至于<strong>原因</strong>：</li><li>基本类型不是Object的子类。</li><li>泛型是通过Object来实现的。</li></ul><h3 id="3、类型参数的约束"><a href="#3、类型参数的约束" class="headerlink" title="3、类型参数的约束"></a>3、类型参数的约束</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>降临</title>
      <link href="/2023/10/28/%E7%BD%91%E7%AB%99%E8%AF%9E%E7%94%9F/"/>
      <url>/2023/10/28/%E7%BD%91%E7%AB%99%E8%AF%9E%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="网站诞生"><a href="#网站诞生" class="headerlink" title="网站诞生"></a>网站诞生</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
